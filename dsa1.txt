// stack and array

#include <bits/stdc++.h>
using namespace std;

// Class for implementing a Stack
class Stack {
    int top;
    int size;
    int *arr;

public:
    Stack(int n) {
        size = n;
        arr = new int[size];
        top = -1;
    }

    ~Stack() {
        delete[] arr;
    }

    void push(int x) {
        if (top == size - 1) {
            cout << "Stack Overflow\n";
            return;
        }
        arr[++top] = x;
    }

    void pop() {
        if (top == -1) {
            cout << "Stack Underflow\n";
            return;
        }
        top--;
    }

    int peek() {
        if (top == -1) {
            cout << "Stack is Empty\n";
            return -1;
        }
        return arr[top];
    }

    bool isEmpty() {
        return top == -1;
    }

    void display() {
        if (top == -1) {
            cout << "Stack is Empty\n";
            return;
        }
        for (int i = top; i >= 0; i--)
            cout << arr[i] << " ";
        cout << endl;
    }
};

// Class for implementing a Queue
class Queue {
    int front, rear, size;
    int *arr;

public:
    Queue(int n) {
        size = n;
        arr = new int[size];
        front = rear = -1;
    }

    ~Queue() {
        delete[] arr;
    }

    void enqueue(int x) {
        if ((rear + 1) % size == front) {
            cout << "Queue Overflow\n";
            return;
        }
        if (front == -1) front = 0;
        rear = (rear + 1) % size;
        arr[rear] = x;
    }

    void dequeue() {
        if (front == -1) {
            cout << "Queue Underflow\n";
            return;
        }
        if (front == rear) {
            front = rear = -1;
        } else {
            front = (front + 1) % size;
        }
    }

    int peek() {
        if (front == -1) {
            cout << "Queue is Empty\n";
            return -1;
        }
        return arr[front];
    }

    bool isEmpty() {
        return front == -1;
    }

    void display() {
        if (front == -1) {
            cout << "Queue is Empty\n";
            return;
        }
        int i = front;
        while (true) {
            cout << arr[i] << " ";
            if (i == rear) break;
            i = (i + 1) % size;
        }
        cout << endl;
    }
};

int main() {
    int n;
    cout << "Enter the size of the Stack and Queue: ";
    cin >> n;

    if (n <= 0) {
        cout << "Size must be a positive integer.\n";
        return 1;
    }

    Stack st(n);
    Queue q(n);

    cout << "\nStack Operations:\n";
    st.push(10);
    st.push(20);
    st.push(30);
    st.display();
    st.pop();
    cout << "After popping: ";
    st.display();

    cout << "\nQueue Operations:\n";
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);
    q.display();
    q.dequeue();
    cout << "After dequeue: ";
    q.display();

    return 0;
}


// doublylinklist

#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
};

class DoublyLinkedList {
private:
    Node* head;

public:
    DoublyLinkedList() : head(nullptr) {}

    void createNode(int value) {
        Node* newNode = new Node{value, nullptr, nullptr};
        if (!head) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->prev = temp;
        }
        cout << "Node created.\n";
    }

    void deleteNode(int value) {
        Node* temp = head;
        while (temp && temp->data != value) {
            temp = temp->next;
        }

        if (!temp) {
            cout << "Node not found.\n";
            return;
        }

        if (temp->prev) temp->prev->next = temp->next;
        if (temp->next) temp->next->prev = temp->prev;
        if (temp == head) head = temp->next;

        delete temp;
        cout << "Node deleted.\n";
    }

    void searchNode(int value) {
        Node* temp = head;
        while (temp) {
            if (temp->data == value) {
                cout << "Value found.\n";
                return;
            }
            temp = temp->next;
        }
        cout << "Value not found.\n";
    }

    void displayList() {
        if (!head) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        while (temp) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    DoublyLinkedList list;
    int choice, value;

    while (true) {
        cout << "\n1. Create Node\n2. Delete Node\n3. Search Node\n4. Display List\n5. Exit\nEnter choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value: ";
            cin >> value;
            list.createNode(value);
            break;
        case 2:
            cout << "Enter value to delete: ";
            cin >> value;
            list.deleteNode(value);
            break;
        case 3:
            cout << "Enter value to search: ";
            cin >> value;
            list.searchNode(value);
            break;
        case 4:
            list.displayList();
            break;
        case 5:
            return 0;
        default:
            cout << "Invalid choice.\n";
        }
    }
}


// postfix
#include <bits/stdc++.h>
using namespace std;
// Function to check operator or not
bool isop(char c)
{
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}
// Presedence
int precedence(char op)
{
    switch (op)
    {
    case '+':
    case '-':
        return 1;
    case '*':
    case '/':
        return 2;
    case '^':
        return 3;
    default:
        return 0;
    }
}
char associativity(char c)
{
    if (c == '^')
        return 'R';
    return 'L';
}
string intopost(const string &infix)
{
    stack<char> ops;
    string suff;
    // Table
    cout << "Step\tOperatorStack\tPostfixExpression\n";
    cout << "-----------------------------------------\n";
    for (char c : infix)
    {
        if (isspace(c))
        {
            continue;
        }
        if (isalnum(c))
        {
            suff += c;
        }
        else if (c == '(')
        {
            ops.push(c);
        }
        else if (c == ')')
        {
            while (!ops.empty() && ops.top() != '(')
            {
                suff += ops.top();
                ops.pop();
            }
            ops.pop(); // Remove '(' from stack
        }
        else if (isop(c))
        {
            while (!ops.empty() && precedence(ops.top()) >= precedence(c) &&
                   associativity(c) == 'L')
            {
                suff += ops.top();
                ops.pop();
            }
            ops.push(c);
        }
        // Intermediate results of table
        cout << suff.size() << "\t";
        stack<char> temp = ops;
        while (!temp.empty())
        {
            cout << temp.top() << " ";
            temp.pop();
        }
        cout << "\t\t" << suff << "\n";
    }
    // Pop all the remaining operators
    while (!ops.empty())
    {
        suff += ops.top();
        ops.pop();
    }
    return suff;
}
int main()
{
    string infix = "a+b*(c^d-e)^(f+g*h)-i";
    cout << "Infix Expression: " << infix << "\n";
    string suff = intopost(infix);
    cout << "Postfix Expression: " << suff << "\n";
    return 0;
}


//infix
#include <bits/stdc++.h>
using namespace std;

// Function to check if a character is an operator
bool isop(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '^';
}

// Function to determine operator precedence
int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}

// Function to determine operator associativity
char associativity(char c) {
    return (c == '^') ? 'R' : 'L';
}

// Function to convert infix to prefix
string infixToPrefix(const string &infix) {
    string rev_infix = infix;
    reverse(rev_infix.begin(), rev_infix.end());

    // Swap '(' with ')' and vice versa
    for (char &c : rev_infix) {
        if (c == '(') c = ')';
        else if (c == ')') c = '(';
    }

    // Use stack to convert reversed infix to postfix
    stack<char> s;
    string prefix = "";
    for (char c : rev_infix) {
        if (isspace(c)) continue;

        if (isalnum(c)) {
            prefix += c;
        } else if (c == '(') {
            s.push(c);
        } else if (c == ')') {
            while (!s.empty() && s.top() != '(') {
                prefix += s.top();
                s.pop();
            }
            if (!s.empty()) s.pop();
        } else if (isop(c)) {
            while (!s.empty() && s.top() != '(' &&
                   (precedence(s.top()) > precedence(c) ||
                   (precedence(s.top()) == precedence(c) && associativity(c) == 'L'))) {
                prefix += s.top();
                s.pop();
            }
            s.push(c);
        }
    }

    // Pop remaining operators
    while (!s.empty()) {
        prefix += s.top();
        s.pop();
    }

    // Reverse the result to get the prefix expression
    reverse(prefix.begin(), prefix.end());
    return prefix;
}

// Main function
int main() {
    string infix = "a+b*(c^d-e)^(f+g*h)-i";
    cout << "Infix Expression: " << infix << endl;
    string prefix = infixToPrefix(infix);
    cout << "Prefix Expression: " << prefix << endl;
    return 0;
}

//binary tree constructor

#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left, *right;
    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& postorder, int inStart, int inEnd, int& postIndex, unordered_map<int, int>& inMap) {
    if (inStart > inEnd) return nullptr;
    int rootVal = postorder[postIndex--];
    TreeNode* root = new TreeNode(rootVal);
    int inIndex = inMap[rootVal];
    root->right = buildTreeHelper(inorder, postorder, inIndex + 1, inEnd, postIndex, inMap);
    root->left = buildTreeHelper(inorder, postorder, inStart, inIndex - 1, postIndex, inMap);
    return root;
}

TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
    int postIndex = postorder.size() - 1;
    unordered_map<int, int> inMap;
    for (int i = 0; i < inorder.size(); i++) inMap[inorder[i]] = i;
    return buildTreeHelper(inorder, postorder, 0, inorder.size() - 1, postIndex, inMap);
}

void preorderTraversal(TreeNode* root) {
    if (!root) return;
    cout << root->val << " ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

int main() {
    vector<int> inorder = {9, 3, 15, 20, 7};
    vector<int> postorder = {9, 15, 7, 20, 3};
    TreeNode* root = buildTree(inorder, postorder);
    preorderTraversal(root);
    return 0;
}


// binary search tree
#include <bits/stdc++.h>
using namespace std;
// Node structure for Binary Search Tree
struct Node
{
    int data;
    Node *left;
    Node *right;
};
// Function to create a new node
Node *createn(int value)
{
    Node *newnode = new Node();
    newnode->data = value;
    newnode->left = nullptr;
    newnode->right = nullptr;
    return newnode;
}
// Function to insert a node in the BST
Node *insertnode(Node *root, int value)
{
    if (root == nullptr)
    {
        return createn(value);
    }
    if (value < root->data)
    {
        root->left = insertnode(root->left, value);
    }
    else if (value > root->data)
    {
        root->right = insertnode(root->right, value);
    }
    return root;
}
// Function to search for a value in the BST
bool searchnode(Node *root, int value)
{
    if (root == nullptr)
    {
        return false;
    }
    if (value == root->data)
    {
        return true;
    }
    else if (value < root->data)
    {
        return searchnode(root->left, value);
    }
    else
    {
        return searchnode(root->right, value);
    }
}
// In-order traversal of the BST
void inordertra(Node *root)
{
    if (root == nullptr)
    {
        return;
    }
    inordertra(root->left);
    cout << root->data << " ";
    inordertra(root->right);
}
// Function to display menu
void menu()
{
    cout << "Menu:\n";
    cout << "1. Create (Insert a node)\n";
    cout << "2. Search\n";
    cout << "3. Display (In-order)\n";
    cout << "4. Exit\n";
}
// Main function
int main()
{
    Node *root = nullptr;
    int choice, value;
    while (true)
    {
        menu();
        cout << "Enter your choice: ";
        cin >> choice;
        switch (choice)
        {
        case 1:
            cout << "Enter value to insert: ";
            cin >> value;
            root = insertnode(root, value);
            break;
        case 2:
            cout << "Enter value to search: ";
            cin >> value;
            if (searchnode(root, value))
            {
                cout << "Value found in the tree.\n";
            }
            else
            {
                cout << "Value not found in the tree.\n";
            }
            break;
        case 3:
            cout << "In-order traversal: ";
            inordertra(root);
            cout << endl;
            break;
        case 4:
            cout << "Exiting...\n";
            return 0;
        default:
            cout << "Invalid choice. Try again.\n";
        }
    }
}


//prims

#include <bits/stdc++.h>
using namespace std;

class Solution
{
public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
	int spanningTree(int V, vector<vector<int>> adj[])
	{
		priority_queue<pair<int, int>,
		               vector<pair<int, int> >, greater<pair<int, int>>> pq;

		vector<int> vis(V, 0);
		// {wt, node}
		pq.push({0, 0});
		int sum = 0;
		while (!pq.empty()) {
			auto it = pq.top();
			pq.pop();
			int node = it.second;
			int wt = it.first;

			if (vis[node] == 1) continue;
			// add it to the mst
			vis[node] = 1;
			sum += wt;
			for (auto it : adj[node]) {
				int adjNode = it[0];
				int edW = it[1];
				if (!vis[adjNode]) {
					pq.push({edW, adjNode});
				}
			}
		}
		return sum;
	}
};


int main() {

	int V = 5;
	vector<vector<int>> edges = {{0, 1, 2}, {0, 2, 1}, {1, 2, 1}, {2, 3, 2}, {3, 4, 1}, {4, 2, 2}};
	vector<vector<int>> adj[V];
	for (auto it : edges) {
		vector<int> tmp(2);
		tmp[0] = it[1];
		tmp[1] = it[2];
		adj[it[0]].push_back(tmp);

		tmp[0] = it[0];
		tmp[1] = it[2];
		adj[it[1]].push_back(tmp);
	}

	Solution obj;
	int sum = obj.spanningTree(V, adj);
	cout << "The sum of all the edge weights: " << sum << endl;

	return 0;
}

//kruskal

#include <bits/stdc++.h>
using namespace std;


class DisjointSet {
    vector<int> rank, parent, size;
public:
    DisjointSet(int n) {
        rank.resize(n + 1, 0);
        parent.resize(n + 1);
        size.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUPar(int node) {
        if (node == parent[node])
            return node;
        return parent[node] = findUPar(parent[node]);
    }

    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_v] < rank[ulp_u]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }

    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);
        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution
{
public:
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // 1 - 2 wt = 5
        /// 1 - > (2, 5)
        // 2 -> (1, 5)

        // 5, 1, 2
        // 5, 2, 1
        vector<pair<int, pair<int, int>>> edges;
        for (int i = 0; i < V; i++) {
            for (auto it : adj[i]) {
                int adjNode = it[0];
                int wt = it[1];
                int node = i;

                edges.push_back({wt, {node, adjNode}});
            }
        }
        DisjointSet ds(V);
        sort(edges.begin(), edges.end());
        int mstWt = 0;
        for (auto it : edges) {
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;

            if (ds.findUPar(u) != ds.findUPar(v)) {
                mstWt += wt;
                ds.unionBySize(u, v);
            }
        }

        return mstWt;
    }
};

int main() {

    int V = 5;
    vector<vector<int>> edges = {{0, 1, 2}, {0, 2, 1}, {1, 2, 1}, {2, 3, 2}, {3, 4, 1}, {4, 2, 2}};
    vector<vector<int>> adj[V];
    for (auto it : edges) {
        vector<int> tmp(2);
        tmp[0] = it[1];
        tmp[1] = it[2];
        adj[it[0]].push_back(tmp);

        tmp[0] = it[0];
        tmp[1] = it[2];
        adj[it[1]].push_back(tmp);
    }

    Solution obj;
    int mstWt = obj.spanningTree(V, adj);
    cout << "The sum of all the edge weights: " << mstWt << endl;
    return 0;
}


// bfs and dfs
#include <bits/stdc++.h>
using namespace std;
const int N = 1e5;
int vis[N];
void dfs(int node, vector<vector<int>> &v)
{
    vis[node] = 1;
    cout << node << " ";
    for (auto it : v[node])
    {
        if (!vis[it])
        {
            dfs(it, v);
        }
    }
}
void bfs(int node, const vector<vector<int>> &v)
{
    int n = v.size();
    vector<bool> visi(n, false);
    queue<int> q;
    visi[node] = true;
    q.push(node);
    while (!q.empty())
    {
        int temp = q.front();
        q.pop();
        cout << temp << " ";
        for (int it : v[temp])
        {
            if (!visi[it])
            {
                visi[it] = true;
                q.push(it);
            }
        }
    }
}
int main()
{
    int nodes, edges;
    cin >> nodes >> edges;
    vector<vector<int>> v(nodes + 1);
    for (int i = 0; i < edges; i++)
    {
        int x, y;
        cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }
    memset(vis, 0, sizeof(vis));
    cout << "DFS sequence:" << endl;
    dfs(0, v);
    cout << endl;
    cout << "BFS sequence:" << endl;
 }
 
 
 // bubble and selection sort 
 void bubbleSort(vector<ll> &v)
{
    int n = v.size();
    for (int i = 0; i < n - 1; i++)
    {
        bool ok = false;
        for (int j = 0; j < n - i - 1; j++)
        {
            if (v[j] > v[j + 1])
            {
                swap(v[j], v[j + 1]);
                ok = true;
            }
        }
        if (!ok)
            break;
    }
}
void selectionSort(vector<ll> &v)
{
    int n = v.size();
    for (int i = 0; i < n - 1; i++)
    {
        int min_idx = i;
        for (int j = i + 1; j < n; j++)
        {
            if (v[j] < v[min_idx])
            {
                min_idx = j;
            }
        }
        swap(v[i], v[min_idx]);
    }
}

//quick sort

#include <bits/stdc++.h>
using namespace std;

int partition(vector<int> &arr, int low, int high) {
    int pivot = arr[low];
    int i = low;
    int j = high;

    while (i < j) {
        while (arr[i] <= pivot && i <= high - 1) {
            i++;
        }

        while (arr[j] > pivot && j >= low + 1) {
            j--;
        }
        if (i < j) swap(arr[i], arr[j]);
    }
    swap(arr[low], arr[j]);
    return j;
}

void qs(vector<int> &arr, int low, int high) {
    if (low < high) {
        int pIndex = partition(arr, low, high);
        qs(arr, low, pIndex - 1);
        qs(arr, pIndex + 1, high);
    }
}

vector<int> quickSort(vector<int> arr) {
    qs(arr, 0, arr.size() - 1);
    return arr;
}

int main()
{
    vector<int> arr = {4, 6, 2, 5, 7, 9, 1, 3};
    int n = arr.size();
    cout << "Before Using quick Sort: " << endl;
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;

    arr = quickSort(arr);
    cout << "After Using quick sort: " << "\n";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << "\n";
    return 0;
}

//merege sort

#include <bits/stdc++.h>
using namespace std;

void merge(vector<int> &arr, int low, int mid, int high) {
    vector<int> temp; // temporary array
    int left = low;      // starting index of left half of arr
    int right = mid + 1;   // starting index of right half of arr

    //storing elements in the temporary array in a sorted manner//

    while (left <= mid && right <= high) {
        if (arr[left] <= arr[right]) {
            temp.push_back(arr[left]);
            left++;
        }
        else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // if elements on the left half are still left //

    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    //  if elements on the right half are still left //
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // transfering all elements from temporary to arr //
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}

void mergeSort(vector<int> &arr, int low, int high) {
    if (low >= high) return;
    int mid = (low + high) / 2 ;
    mergeSort(arr, low, mid);  // left half
    mergeSort(arr, mid + 1, high); // right half
    merge(arr, low, mid, high);  // merging sorted halves
}

int main() {

    vector<int> arr = {9, 4, 7, 6, 3, 1, 5}  ;
    int n = 7;

    cout << "Before Sorting Array: " << endl;
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " "  ;
    }
    cout << endl;
    mergeSort(arr, 0, n - 1);
    cout << "After Sorting Array: " << endl;
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " "  ;
    }
    cout << endl;
    return 0 ;
}

    
    
    
    
    bfs(0, v);
}
